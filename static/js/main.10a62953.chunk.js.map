{"version":3,"sources":["components/albumes.js","components/fotos.js","components/usuarios.js","components/inicio.js","AppRutas.js","App.js","serviceWorker.js","index.js"],"names":["Albumes","state","albums","handleClick","albumId","props","selectedAlbumId","onAlbumSelected","axios","get","then","res","console","log","setState","data","catch","err","albumData","this","className","length","map","albumItem","key","id","onClick","style","backgroundColor","selectedUserId","title","Component","Fotos","photos","nextProps","photoData","photoItem","src","thumbnailUrl","Usuarios","user","userData","userItem","name","email","address","street","suite","city","Inicio","onUserSelected","userId","album","Routa","path","render","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10a62953.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Albumes extends Component {\r\n  state = {\r\n    albums: [] // this is the only thing whose state gets updated in this component\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://jsonplaceholder.typicode.com/albums\")\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          albums: res.data\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  /*/ albums' dropdown wer/*e not loading up until I used componentWillReceiveProps(nextProps). Src: http://busypeoples.github.io/post/react-component-lifecycle/\r\n  componentWillReceiveProps(nextProps) {\r\n    // if (nextProps.selectedUserId === false) this.setState({ albums: [] });\r\n\r\n    if (nextProps.selectedUserId)\r\n      // manually force update props\r\n      axios\r\n        .get(\r\n          // using the query in the url it takes less to load up because it doesn't have to load up all the items\r\n          `https://jsonplaceholder.typicode.com/albums?userId=${\r\n            nextProps.selectedUserId\r\n          }`\r\n        )\r\n        .then(res => {\r\n          this.setState({\r\n            albums: res.data\r\n          });\r\n        })\r\n        .catch(err => console.log(err));\r\n  }\r\n*/\r\n    handleClick = albumId => {\r\n    // checks if user is active already, sets the state to false in home and consequently the button becomes white again\r\n    if (albumId === this.props.selectedAlbumId) {\r\n      this.props.onAlbumSelected(false);\r\n    } else {\r\n      this.props.onAlbumSelected(albumId);\r\n    } // 2) handleClick() passes the userId to onUserSelected, which has been created in Home and will uopdate the state\r\n  };\r\n\r\n    render() {\r\n    const albumData = this.state.albums; // makes it easier to access the state\r\n    return (\r\n      <div className=\"main_container\">\r\n        <div className=\"user_container\">\r\n          <h2 className=\"title\">Títulos de álbumes </h2>\r\n          {albumData.length === 0  ? (\r\n            <p>...Cargando</p>\r\n          ) : (\r\n            <ul className=\"titulosAlbumes\">\r\n              {albumData.map(albumItem => {\r\n                return (\r\n                  <div\r\n                    key={albumItem.id} // you can't render two things with the same id. either pass a key to map or do like this\r\n                    className=\"listaTitulos\"\r\n                    // 1) call handleClick func with the user id as parameter\r\n                    onClick={() => this.handleClick(albumItem)}\r\n                    // check if the selectedUserId I passed from Home as props is the same as the userId and changes its colour\r\n                    style={{\r\n                      // style wants an object. backgroundcolor is a convention for react which wouldn't accept \"backgroud-color\"\r\n                      backgroundColor:\r\n                        this.props.selectedUserId === albumItem.id // check if the selectedUserId is the same and the one we are looping in\r\n\r\n                          \r\n                    }}\r\n                  >\r\n                    {albumItem.title}\r\n                  </div>\r\n                );\r\n              })}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Albumes;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Fotos extends Component {\r\n  state = {\r\n    photos: [] // this is the only thing whose state gets updated in this component\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    axios\r\n      .get(\r\n        // using the query in the url it takes less to load up because it doesn't have to load up all the items\r\n        `https://jsonplaceholder.typicode.com/photos?albumId=${\r\n          nextProps.selectedAlbumId\r\n        }`\r\n      )\r\n      .then(res => {\r\n      \tconsole.log(res);\r\n        this.setState({\r\n          photos: res.data\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const photoData = this.state.photos; // makes it easier to access the state\r\n    return (\r\n      <div>\r\n        {!photoData ? (\r\n          <option>...Loading</option>\r\n        ) : (\r\n          <div className=\"photobox_container\">\r\n            {photoData.map(photoItem => {\r\n              // if (parseInt(this.state.selectedAlbumId) === parseInt(photoItem.albumId)) // this condition is no longer needed because I am updating the axios api url\r\n              return <img key={photoItem.id} src={photoItem.thumbnailUrl}  />;\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fotos;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Usuarios extends Component {\r\n  state = {\r\n    user: [] // this is the only thing whose state gets updated in this component\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    axios\r\n      .get(\r\n        // using the query in the url it takes less to load up because it doesn't have to load up all the items\r\n        `https://jsonplaceholder.typicode.com/users?id=${\r\n          nextProps.selectedUserId\r\n        }`\r\n      )\r\n      .then(res => {\r\n      \tconsole.log(res);\r\n        this.setState({\r\n          user: res.data\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const userData = this.state.user; // makes it easier to access the state\r\n    return (\r\n      <div>\r\n        {!userData ? (\r\n          <option>...Loading</option>\r\n        ) : (\r\n          <div className=\"ver_usuarios\">\r\n            {userData.map(userItem => {\r\n              // if (parseInt(this.state.selectedAlbumId) === parseInt(photoItem.albumId)) // this condition is no longer needed because I am updating the axios api url\r\n              return( \r\n              <div>\r\n                  <p>{userItem.name}</p>\r\n                  <p>{userItem.email}</p>\r\n                  <p>{userItem.address.street} {userItem.address.suite} {userItem.address.city}</p>\r\n              </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Usuarios;","import React, { Component } from \"react\";\r\n// import User from \"./User\";\r\nimport Albumes from \"./albumes\";\r\nimport Fotos from \"./fotos\";\r\nimport Usuarios from \"./usuarios\";\r\n\r\nclass Inicio extends Component {\r\n  state = {\r\n    selectedUserId: false,\r\n    selectedAlbumId: false\r\n  };\r\n\r\n  // gets the userId from the component User, to which it's passed as props\r\n  onUserSelected = userId => {\r\n    this.setState({ selectedUserId: userId, selectedAlbumId: false });\r\n  };\r\n\r\n  onAlbumSelected = album => {\r\n    this.setState({ selectedUserId: album.userId, selectedAlbumId: album.id });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n          <div className=\"row\">\r\n          <div className=\"albumes_container\">\r\n            <Albumes\r\n              // Pass the selectedUserId state as props to Album Component, this will update Axios's url request for album\r\n              //selectedUserId={this.state.selectedUserId}\r\n              // Pass the func onAlbumSelected to Album Component, this will update the state of selectedAlbumId here in Home.js\r\n              onAlbumSelected={this.onAlbumSelected}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"fotos_container\">\r\n              <Usuarios\r\n              selectedUserId={this.state.selectedUserId}\r\n              />\r\n              <Fotos \r\n                  selectedAlbumId={this.state.selectedAlbumId}\r\n              />\r\n            </div>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Inicio;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Inicio from \"./components/inicio\";\r\n\r\nclass Routa extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // user: \"\"\r\n    };\r\n  }\r\n\r\n  // componentDidMount;\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Route path=\"/\" render={props => <Inicio {...props} />} />\r\n          {/* <Route path=\"/:user\" render={props => <Home {...props} />} /> */}\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routa;\r\n","// Let's import React, our styles and React Async\nimport React, { Component } from 'react';\nimport './App.css';\nimport Routa from \"./AppRutas\";\n\nclass App extends Component {\n  render() {\n    return <Routa/>;\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}